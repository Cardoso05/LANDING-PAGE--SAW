import React, { useState } from 'react';
import useGemini from '../hooks/useGemini';
import { openWhatsApp } from '../utils/openWhatsApp';
import styles from './Wizard.module.css';

const Wizard = () => {
  const { fetchGemini, loading } = useGemini();

  const [step, setStep] = useState(0);
  const [questions, setQuestions] = useState([
    'Qual tarefa consome mais tempo na sua equipe?'
  ]);
  const [answers, setAnswers] = useState([]);
  const [currentQuestion, setCurrentQuestion] = useState(questions[0]);
  const [inputValue, setInputValue] = useState('');

  async function fetchNextQuestion(history) {
    const prompt = `Voc√™ √© um consultor de automa√ß√£o empresarial especializado em WhatsApp e IA. \n\nBaseado na resposta anterior do cliente: "${history[history.length - 1]}"\nHist√≥rico: ${history.join(' -> ')}\n\nGere a pr√≥xima pergunta estrat√©gica para entender melhor como automatizar a empresa dele.\nFoque em ${step === 0 ? 'impacto financeiro e volume de atendimento' : 'resultados desejados e metas espec√≠ficas'}.\n\nRegras:\n- M√°ximo 10 palavras\n- Pergunta direta e espec√≠fica\n- Focada em automa√ß√£o de WhatsApp/atendimento\n- Tom consultivo e profissional\n\nResponda APENAS a pergunta, sem explica√ß√µes adicionais.`;

    try {
      const text = await fetchGemini(prompt);
      return text || (step === 0 ? 'Como isso impacta seu faturamento mensal?' : 'Qual seria o resultado ideal para voc√™?');
    } catch {
      const fallback = [
        'Como isso impacta seu faturamento mensal?',
        'Qual seria o resultado ideal para voc√™?'
      ];
      return fallback[step] || 'Como posso ajudar voc√™ melhor?';
    }
  }

  async function fetchSolution() {
    const prompt = `Voc√™ √© um especialista em automa√ß√£o empresarial com foco em WhatsApp e IA.\n\nDIAGN√ìSTICO DO CLIENTE:\n${questions.map((q, i) => `${i + 1}. ${q}\nResposta: ${answers[i]}`).join('\n\n')}\n\nBaseado nessas informa√ß√µes, crie uma proposta de valor espec√≠fica e personalizada para automa√ß√£o via WhatsApp.\n\nESTRUTURA DA RESPOSTA:\nüéØ Solu√ß√£o Recomendada: [Nome da solu√ß√£o espec√≠fica]\nüí° Como funciona: [Explica√ß√£o em 2-3 linhas]\nüìà Resultados esperados: [Benef√≠cios quantificados baseados nas respostas]\n‚ö° Implementa√ß√£o: [Timeline e pr√≥ximos passos]\n\nRegras:\n- M√°ximo 150 palavras\n- Use os dados espec√≠ficos fornecidos\n- Seja direto e pr√°tico\n- Foque nos benef√≠cios tang√≠veis\n- Tom consultivo e confiante`;

    try {
      const text = await fetchGemini(prompt);
      return text || 'Solu√ß√£o personalizada enviada!';
    } catch {
      return 'Solu√ß√£o Recomendada: Automa√ß√£o Inteligente para WhatsApp.';
    }
  }

  const handleSubmit = async (e) => {
    e.preventDefault();
    if (!inputValue.trim()) return;

    const newAnswers = [...answers, inputValue];
    setAnswers(newAnswers);
    setInputValue('');

    if (step < 2) {
      // Pr√≥xima pergunta
      const nextQuestion = await fetchNextQuestion(newAnswers);
      setQuestions([...questions, nextQuestion]);
      setCurrentQuestion(nextQuestion);
      setStep(step + 1);
    } else {
      // Gera solu√ß√£o e envia
      const solution = await fetchSolution();
      const finalMessage = `Ol√°! Completei o diagn√≥stico:\n\n` +
        questions.map((q, i) => `${i + 1}. ${q}\nR: ${newAnswers[i]}`).join('\n\n') +
        `\n\nSolu√ß√£o sugerida:\n${solution}`;
      openWhatsApp(finalMessage);
    }
  };

  return (
    <section className={`tek-wizard ${styles.wizard}`} aria-live="polite">
      {loading ? (
        <div className={styles.loading} aria-busy="true">Carregando‚Ä¶</div>
      ) : (
        <form onSubmit={handleSubmit} className={`${styles.form} wizard-form`}>
          <label className="sr-only" htmlFor="wizard-input">{currentQuestion}</label>
          <input
            id="wizard-input"
            type="text"
            placeholder={currentQuestion}
            value={inputValue}
            onChange={(e) => setInputValue(e.target.value)}
            required
            className={`${styles.input} wizard-input`}
          />
          <button type="submit" className={`${styles.button} wizard-button btn btn--primary`} disabled={!inputValue.trim()}>
            {step === 2 ? 'Finalizar' : 'Continuar'}
          </button>
          <p className={`${styles.progress} wizard-progress`}>Pergunta {step + 1} de 3</p>
        </form>
      )}
    </section>
  );
};

export default Wizard; 